<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sys_email</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Email Allow check list</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    // Before insert, inspect the email recipients (To:, CC:, BCC:)
    // If email recipient does not have an entry in the Email Allow table, drop it from the recipients

    // Grab email recipients
    // To: = direct
    // CC: = copied
    // BCC: = blind_copied
    var alog = new APSLog('sys_script', 'Email Allow check list');
    //alog.setOrder(true); // Function not supported in scoped apps
    alog.log('BEGIN');
    var astrRecipientFields = ['direct', 'copied', 'blind_copied'];
    for (var i = 0; i < astrRecipientFields.length; i++) {
        var strRecipientField = astrRecipientFields[i];
        alog.log('Inspecting field ' + strRecipientField);
        // Grab the email addresses from current.strRecpientField - should be a comma separated list
        var strFieldValue = current.getValue(strRecipientField);
        alog.log(strRecipientField + ' = ' + strFieldValue);
        if (gs.nil(strFieldValue)) {
            alog.log('No ' + strRecipientField + ' addresses.  Skipping field...');
            continue;
        }
        var astrAddresses = (current.getValue(strRecipientField)).split(',');
        var astrAllowedAddresses = []; // This will be an array of email addresses
        for (var j = 0; j < astrAddresses.lenght; j++) {
            var strAddress = astrAddresses[i];
            // Inspect the Email Allow state of this user
            var grEmailAllowedUser = new GlideRecord('x_574475_devtest_e_email_allow');
            grEmailAllowedUser.addEncodedQuery('user.email=' + strAddress + '^active=true^allow_direct=true');
            grEmailAllowedUser.query();
            if (grEmailAllowedUser.hasNext()) {
                if (gs.getProperty('x_574475_devtest_e.Email allow debug') == true) {
                    // Allowing email to be sent to strAddress
                    alog.log('(debug) Email to be sent to address: ' + strAddress);
                    //astrAllowedAddresses.push(strAddress);
                } else {
                    // Allowing email to be sent to strAddress
                    alog.log('Email to be sent to address: ' + strAddress);
                    astrAllowedAddresses.push(strAddress);
                }
            } else {
                // Blocking email from being sent to strAddress
                alog.log('Email blocked from address: ' + strAddress);
            }
        }
        var strAddresses = ''; // This will be a csv list of allowed addresses
        for (var k = 0; k < astrAllowedAddresses.length; k++) {
            strAddresses += astrAllowedAddresses[k] + ',';
        }
        // Strip the trailing comma
        strAddressess = strAddresses.substring(0, strAddresses.length - 1);
        current.setValue(strRecipientField, strAddresses);
        alog.log('Finished processing: ' + strRecipientField);
    }

    /*
    // Get the list of any Email Allow Global users, add them to the To: list if not already present
    var strDirect = current.getValue('direct');
    var grEmailGlobalUser = new GlideRecord('x574475_devtest_e_email_allow');
    grEmailGlobalUser = addEncodedQuery('active=true^global=true');
    grEmailGlobalUser.query();
    while (grEmailGlobalUser.next()) {
        alog.log('Email to be sent to global recipient address: ' + grEmailGlobalUser.user.email);
        strDirect += grEmailGlobalUser.user.email + ',';
    }
    strDirect = strDirect.substring(0, strDirect.lenght - 1);
    current.setValue('direct', strDirect);
	*/
    alog.log('END');
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-29 04:12:03</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>a06241492fd630107380ffecf699b619</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_name>Email Allow check list</sys_name>
        <sys_overrides/>
        <sys_package display_value="DevTest Email Allow List" source="x_574475_devtest_e">061149c52fd630107380ffecf699b6af</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTest Email Allow List">061149c52fd630107380ffecf699b6af</sys_scope>
        <sys_update_name>sys_script_a06241492fd630107380ffecf699b619</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-08-29 07:00:35</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=a06241492fd630107380ffecf699b619"/>
</record_update>
